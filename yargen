#!/usr/bin/env perl

# MIT License
# Copyright (c) 2016 Denis Efremov yefremov.denis@gmail.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use warnings;
use strict;
use feature qw/say/;

use Getopt::Long qw/GetOptions/;
use Pod::Usage qw/pod2usage/;
my $MLOADED;
BEGIN {
   eval {
      require Mojo::UserAgent;
      require Storable;
      Mojo::UserAgent->import();
      Storable->import(qw/store retrieve/);
      $MLOADED = 1;
   };
}

my $arg_string = join(" ", $0, @ARGV);
my $module;
my $cve;
my $license = 0;
my $help = 0;

GetOptions("m|module=s" => \$module,
           "c|cve=s"    => \$cve,
           "l|license"  => \$license,
           "help"       => \$help)
or pod2usage(2);
pod2usage({-verbose => 2, -exitval => 1}) if $help;
if ($license) {
   open my $self, '<', $0;
   my @l;
   my $first = 0;
   while (<$self>) {
      chomp;
      unless ($first) {
         if ($_ =~ /\A\#.*?license/i) {
            push @l, $_;
            $first++;
         }
      } else {
         if ($_ =~ /\A\#/) {
            push @l, $_;
         } else {
            last;
         }
      }
   }
   say join("\n", map {s/\A#\h*+//r} @l);
   close $self;
   exit 0;
}

unless ($MLOADED) {
   die "Please, install perl module Mojolicious.
Installation:
\tcpan Mojolicious ||
\tdnf install perl-Mojolicious.noarch\n"
}

pod2usage({-msg => "Please, provide perl module name.\n", -exitval => 1, -verbose => 0})
	unless $module;

pod2usage({-msg => "'$module' is not a valid perl module name.\n", -exitval => 1, -verbose => 0})
	unless $module =~ /^\w++((?:::)\w++)*?$/;

pod2usage({-msg => "Please, provide cve argument.\n", -exitval => 1, -verbose => 0})
	unless $cve;

if ($cve =~ /^CVE/i) {
   unless ($cve =~ /^CVE-\d{4}-\d{4}$/i) {
      pod2usage({-msg => "'$cve' is not a valid cve id.\n", -exitval => 1, -verbose => 0})
   }
}

my $determine_module = "package\\s+$module\\s*;";
my $module_det_re = qr/$determine_module/;
my $mmodule = 'Perl' . $module =~ s/:++//gr  . 'Module';
my $hmodule = $module =~ s/::/-/gr;
my $ccve = uc($cve =~ tr/-/_/r);

sub trim {
   $_[0] =~ s/(^\s++)|(\s++$)//gr
}

sub to_regex {
   my $v = $_[0];
   $v =~ s!\h+!\\s*!g;
   $v =~ s!([\$\^()\[\]])!\\$1!g;
   $v =~ s!['"]!(\\'|\\")!g;
   $v =~ s!our\\s\K\*!+!g;
   $v =~ s%(?<!\\s[*+])=%\\s*=%g;
   $v =~ s%=(?!\\s)%=\\s*%g;
   $v =~ s%(?<!\\s[*+]);%\\s*;%g;
   $v;
}

sub retrive_module_versions
{
   my $module = $_[0];
   my $dump = $module . '.dump';
   my @modules;

   if (-f $dump) {
      @modules = @{retrieve($dump)};
   }

   unless (@modules) {
      my $ua = Mojo::UserAgent->new();
      my $r = $ua->get('https://metacpan.org/pod/' . $module);
      if ($r->success && $r->res->code() == 200) {
         my $cl = $r->res->dom
                         ->find('div.release.status-latest.maturity-released select option')
                         ->map(attr => 'value')
                         ->compact()
                         ->map(sub{s!^/module!https://api.metacpan.org/source!r})
                         ->sort()
                         ->uniq();
         @modules = $cl->map(sub {
               my $r = $ua->get($_);
               if ($r->success && $r->res->code() == 200) {
                  $r->res->body
               } else {
                  warn "Can't get module $_\n";
                  undef
               }
            }
         )->compact()->each();
         store \@modules, $dump;
      } else {
         warn "Module not found on metacpan\n";
      }
   }

   my %versions;
   my $ident = 0;
   foreach(@modules) {
      # check
      die "Failed to recognise module with standart re:\n$_\n"
         unless $_ =~ /$module_det_re/;

      #if (/^.*?v(?:e(?:r(?:s(?:i(?:o(?:n)?)?)?)?)?)?\h*=\h*(?:['"])([^'"]++)(?:['"])\h*;.*$/pim) {
      if (/^.*?v(?:e(?:r(?:s(?:i(?:o(?:n)?)?)?)?)?)?\h*=\h*.*?(\d++(?:[\.\:\-\_]\w++)*).*?;/pim) {
         my $v   = trim(${^MATCH});
         my $ver = 'v_' . $1 =~ tr/./_/r;
         $ident = length($ver)
            if $ident < length($ver);
         unless (exists $versions{$ver}) {
            $versions{$ver} = $v;
         } else {
            die "Different signatures of same version $ver: '$v' and '$versions{$ver}'\n"
               unless $versions{$ver} eq $v;
         }
      } else {
         die "Failed to find version string in module:\n$_\n";
      }
   }
   my @vers;
   foreach(reverse sort keys %versions) {
      my $i = ' ' x ($ident - length($_) + 1);
      my $r = to_regex($versions{$_});
      push @vers, "\t\t$_" . $i . "= '$r'";
   }

   join("\n", @vers);
}

sub try_determine_version
{
   if ($_[0] =~ /(?:(?:before|up\h+to)\h*)?(?:\d++(?:[\.\:\-\_]\w++)*)(?:(?:\h*and\h+(?:earlier|below))|(?:\h*through\h*(?:\d++(?:[\.\:\-\_]\w++)*)))?/p) {
      ${^MATCH}
   } else {
      warn "Can't determine version\n";
      ''
   }
}

sub fetch_description
{
   my $cve = $_[0];
   my $saved_mitre = $_[0] . ".mitre";
   my $saved_vuldb = $_[0] . ".vuldb";
   my %desc;

   my $ua = Mojo::UserAgent->new(max_redirects => 0);
   $ua->transactor->name('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36');

   my $dom = undef;
   unless (-r $saved_mitre) {
      my $r = $ua->get('http://cve.mitre.org/cgi-bin/cvename.cgi?name=' . $cve);
      if ($r->success && $r->res->code() == 200) {
         $dom = $r->res->dom;
         store $dom, $saved_mitre;
      }
   } else {
      $dom = retrieve($saved_mitre);
   }

   if ($dom) {
      my $c = $dom->find('#GeneratedTable tr:nth-child(4) > td')
                  ->map('text')
                  ->join("\n");
      $desc{full} = "<p>" . trim($c) . "</p>";
   } else {
      warn "Failed to fetch full description.\n";
      unlink $saved_mitre if -f $saved_mitre;
      $desc{full} = '';
   }

   unless (-r $saved_vuldb) {
      my $r = $ua->post('http://vuldb.com/?search' => form => {cve => $cve});
      if ($r->success && $r->res->code() == 200) {
         $dom = $r->res->dom;
         store $dom, $saved_vuldb;
      }
   } else {
      $dom = retrieve($saved_vuldb);
   }

   if ($dom) {
      my $c = $dom->find('.vullist')
                  ->join("\n");

      my @risk  = ($c =~ /risksymbol\h++(\w++)/g);
      if ($#risk == 0) {
         $desc{risk} = $risk[0];
         if ($c =~ /\?id\.\d++\h*"\h*>\h*(.+?)<\/a>/) {
            $desc{short} = $1;
         } else {
            warn "Failed to fetch short description.\n";
            unlink $saved_vuldb if -f $saved_vuldb;
            $desc{short} = '';
         }
      } else {
         warn "Failed to fetch risk indicator.\n";
         unlink $saved_vuldb if -f $saved_vuldb;
         $desc{risk} = '';
      }
   } else {
      warn "Failed to fetch risk indication and short description.\n";
      unlink $saved_vuldb if -f $saved_vuldb;
      $desc{short} = '';
      $desc{risk}  = '';
   }

   $desc{version} = try_determine_version($desc{full});

   \%desc;
}

my $str  = retrive_module_versions($module);
my $desc = fetch_description($cve);

my $private_rule_tmpl =
"private rule $mmodule
{
//This rule was generated by: $arg_string
\tmeta:
\t\tcustom_description = \"Private rule for identifying Perl $module Module\"
\tstrings:
\t\t\$package = /$determine_module/
\tcondition:
\t\t\$package
}";
say $private_rule_tmpl;

say '';

my $yara_rule_tmpl =
"rule $ccve
{
//This rule was generated by: $arg_string
\tmeta:
\t\tcomponent_name = \"$hmodule module for Perl\"
\t\tcomponent_version = \"$desc->{version}\"
\t\tcustom_title = \"$desc->{short}\"
\t\tcustom_level = \"$desc->{risk}\"
\t\tcustom_description = \"$desc->{full}\"
\tstrings:
// !!! Please, edit generated list of versions manually !!!
$str
// !!! Please, edit generated list of versions manually !!!
\tcondition:
\t\t$mmodule and any of (\$v*)
}";
say $yara_rule_tmpl;

__END__
=head1 NAME

yargen - generate a rule in yara format with a description of vulnerability in a perl module.
The rule is for Positive Technologies(c) Approof tool B<http://approof.ptsecurity.ru/>.

=head1 SYNOPSIS

yargen --module <Perl::Module> --cve <CVE-####-####>

 Options:
   --module          perl module
   --cve             cve id
   --help            help message
   --license         print license

=head1 OPTIONS

=over 4

=item B<--module>

Perl module name. Example: HTML::Scrubber. https://metacpan.org/pod/HTML::Scrubber

=item B<--cve>

CVE id. Example: CVE-2015-5667. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5667

=item B<--license>

Print license.

=item B<--help>

Print this message.

=back

=head1 DESCRIPTION

B<This program> will fetch the description of CVE from http://cve.mitre.org/,
http://vuldb.com and get an infomation about a perl module from
http://metacpan.org.
According to the information from metacpan a list of B<all> module releases
will be formed and searched against version identifiers.
Finally a rule in yara format (http://virustotal.github.io/yara/) with CVE description
will be generated.

=head1 EXAMPLE

 $ ./yargen --module HTML::Scrubber --cve CVE-2015-5667
 
 private rule PerlHTMLScrubberModule
 {
 #This rule was generated by: ./yargen --module HTML::Scrubber --cve CVE-2015-5667
 	meta:
 		custom_description = "Private rule for identifying Perl HTML::Scrubber Module"
 	strings:
 		$package = /package\s+HTML::Scrubber;/
 	condition:
 		$package
 }
 
 rule CVE_2015_5667
 {
 #This rule was generated by: ./yargen --module HTML::Scrubber --cve CVE-2015-5667
 	meta:
 		component_name = "HTML-Scrubber module for Perl"
 		component_version = "before 0.15"
 		custom_title = "HTML-Scrubber Module up to 0.14 on Perl Comment Handler cross site scripting"
 		custom_level = "low"
 		custom_description = "<p>Cross-site scripting (XSS) vulnerability in the HTML-Scrubber module before 0.15 for Perl, when the comment feature is enabled, allows remote attackers to inject arbitrary web script or HTML via a crafted comment.</p>"
 	strings:
 # !!! Please, edit generated list of versions manually !!!
 		v_0_15 = 'our\s+\$VERSION\s*=\s*(\'|\")0.15(\'|\");'
 		v_0_14 = 'our\s+\$VERSION\s*=\s*(\'|\")0.14(\'|\");'
 		v_0_13 = 'our\s+\$VERSION\s*=\s*(\'|\")0.13(\'|\");'
 		v_0_12 = 'our\s+\$VERSION\s*=\s*(\'|\")0.12(\'|\");'
 		v_0_11 = 'our\s+\$VERSION\s*=\s*(\'|\")0.11(\'|\");'
 		v_0_10 = 'our\s+\$VERSION\s*=\s*(\'|\")0.10(\'|\");'
 		v_0_09 = '\$HTML::Scrubber::VERSION\s*=\s*(\'|\")0.09(\'|\");'
 # !!! Please, edit generated list of versions manually !!!
 
 	condition:
 		PerlHTMLScrubberModule and any of ($v*)
 }

=cut
